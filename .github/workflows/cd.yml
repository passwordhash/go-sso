name: CD

# Необходимые переменные на github:
# vars.DOCKERHUB_USERNAME - логин в dockerhub
# secrets.DOCKERHUB_TOKEN - токен доступа к dockerhub
# vars.SSH_HOST - хост для ssh
# vars.SSH_USER - пользователь для ssh
# secrets.SSH_KEY - приватный ключ для ssh
# secrets.SSH_PASSPHRASE - пароль к приватному ключу
# env.VAULT_ADDR - адрес vault
# secrets.VAULT_TOKEN - токен доступа к vault

on:
    push:
        tags:
            - "v*.*.*" # любые теги вида v1.0.0

jobs:
    build:
        environment: production

        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Set version
              uses: ./.github/actions/set-version

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ vars.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build and push Docker image
              uses: docker/build-push-action@v6
              with:
                  context: .
                  push: true
                  no-cache: true
                  file: ./docker/prod.Dockerfile
                  platforms: linux/amd64
                  # platforms: linux/amd64, linux/arm64
                  tags: |
                      ${{ github.repository }}:latest
                      ${{ github.repository }}:${{ env.VERSION }}

            - name: Upload config as artifact
              uses: actions/upload-artifact@v4
              with:
                  name: config-files
                  path: ./config/

    deploy:
        environment: production

        needs: build #tests ?

        runs-on: ubuntu-latest

        env:
            VAULT_ADDR: http://vault.passwordhash.tech
            CONTAINER_NAME: go-sso
            CONTAINER_PORT: 50055
            HOST_CONFIG_PATH: /home/yaroslav/.config/go-sso/

        steps:
            - name: Download config artifact
              uses: actions/download-artifact@v4
              with:
                  name: config-files
                  path: ./config/

            - name: Copy config to server
              uses: appleboy/scp-action@v0.1.5
              with:
                  host: ${{ vars.SSH_HOST }}
                  username: ${{ vars.SSH_USER }}
                  key: ${{ secrets.SSH_KEY }}
                  passphrase: ${{ secrets.SSH_PASSPHRASE }}
                  source: ./config/*
                  target: ${{ env.HOST_CONFIG_PATH }}

            - name: Run docker image
              uses: appleboy/ssh-action@v1.2.0
              with:
                  host: ${{ vars.SSH_HOST }}
                  username: ${{ vars.SSH_USER }}
                  key: ${{ secrets.SSH_KEY }}
                  passphrase: ${{ secrets.SSH_PASSPHRASE }}
                  script: |
                      export VAULT_ADDR=${{ env.VAULT_ADDR }}
                      export VAULT_TOKEN=${{ secrets.VAULT_TOKEN }}
                      vault kv get -format=json -mount=kv ${{ env.CONTAINER_NAME }} | \
                        jq -r '.data.data | to_entries[] | "\(.key)=\(.value)"' > .env

                      docker pull ${{ github.repository }}:latest
                      docker stop ${{ env.CONTAINER_NAME }} || true
                      docker rm ${{ env.CONTAINER_NAME }} -f || true
                      docker run -d  \
                        --env-file .env \
                        -v ${{ env.HOST_CONFIG_PATH }}/config/:/app/config \
                        -p 50055:${{ env.CONTAINER_PORT }} \
                        --name ${{ env.CONTAINER_NAME }} \
                        ${{ github.repository }}:latest

            - name: Clean up
              run: |
                  rm -f .env
                  rm -rf ./config/*

    deploy-dev:
        environment: production

        # needs: build #tests ?

        runs-on: ubuntu-latest

        env:
            CONTAINER_NAME: go-sso
            CONTAINER_PORT: 50055
            GO_SSO_REPO: https://github.com/passwordhash/go-sso

        steps:
            - name: Run compose up
              uses: appleboy/ssh-action@v1.2.0
              with:
                  host: ${{ vars.SSH_HOST }}
                  username: ${{ vars.SSH_USER }}
                  key: ${{ secrets.SSH_KEY }}
                  passphrase: ${{ secrets.SSH_PASSPHRASE }}
                  script: |
                      rm -rf go-sso
                      git clone ${{ env.GO_SSO_REPO }} go-sso
                      cd go-sso

                      docker compose \
                            --env-file docker/.env.dev \
                            -f docker/docker-compose.dev.yml \
                            --project-name go-sso_dev \
                            up -d

    migrate:
        environment: production

        needs: deploy

        runs-on: ubuntu-latest

        env:
            VAULT_ADDR: http://vault.passwordhash.tech
            CONTAINER_NAME: go-sso
            CONTAINER_PORT: 50055
            HOST_CONFIG_PATH: /home/yaroslav/.config/go-sso/

        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Install dependencies
              run: go mod tidy

            - name: Install Vault CLI
              run: |
                  curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
                  echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
                  sudo apt update && sudo apt install vault -y

            - name: Export secrets from Vault to .env
              run: |
                  export VAULT_ADDR=${{ env.VAULT_ADDR }}
                  export VAULT_TOKEN=${{ secrets.VAULT_TOKEN }}

                  vault kv get -format=json -mount=kv ${{ env.CONTAINER_NAME }} | \
                    jq -r '.data.data | to_entries[] | "\(.key)=\(.value)"' > .env

            - name: Export .env vars into shell and run migration
              run: |
                  set -a
                  source .env
                  set +a
                  go run ./cmd/migrator/main.go -config ./config/prod.yml
